module Bridge_Top_sva(input logic Hclk,
                      input logic Hresetn,
                      input logic Hwrite,
                      input logic Hreadyin,
                      input logic [31:0] Hwdata,
                      input logic [31:0] Haddr,
                      input logic [1:0] Htrans,
                      input logic [31:0] Prdata,
                      input logic [2:0] Pselx,
                      input logic [31:0] Paddr,
                      input logic [31:0] Pwdata,
                      input logic Penable,
                      input logic Pwrite,
                      input logic Hreadyout,
                      input logic [1:0] Hresp,
                      input logic [31:0] Hrdata);

let addr0 = Haddr>=32'h8000_0000 && Haddr<32'h8400_0000;
let addr1 = Haddr>=32'h8400_0000 && Haddr<32'h8800_0000;
let addr2 = Haddr>=32'h8800_0000 && Haddr<32'h8C00_0000;

let possible_Pselx = ((Pselx == 0) || (Pselx == 1) || (Pselx == 2) || (Pselx == 4)); 



// No HREADY in reset state
assume property (@(posedge Hclk) !(!Hresetn && Hreadyin));

// Fix HTRANS to be 2'b10 or 2'b11
assume property(@(posedge Hclk) (Htrans == 2'b10) || (Htrans == 2'b11));

// Valid HWDATA in data cycle of HWRITE
assume property (@(posedge Hclk) disable iff(!Hresetn) (Hwrite |=> !$isunknown(Hwdata)));

// HADDR should be in the range of peripherals address
assume property (@(posedge Hclk) disable iff(!Hresetn) (Haddr>=32'h8000_0000 && Haddr<32'h8C00_0000));

// when HWRITE is high HREADYIN should be high in that cycle and in following cycle 
assume property (@(posedge Hclk) disable iff(!Hresetn) (Hwrite |-> Hreadyin[*2]));

// HREADYIN is high for 2 consecutive cycles later HREADYIN shouldn't be high until there are 2 times HREADYOUT
assume property (@(posedge Hclk) disable iff(!Hresetn) (Hreadyin ##1 Hreadyin |=> (!Hreadyin throughout Hreadyout[->2])));

// For Read transaction HREADYIN shouldn't be high sencond until HREADYOUT of 1st read is high (added for Hreadyout_penable_read)
assume property (@(posedge Hclk) disable iff(!Hresetn) (Hreadyin && !Hwrite |=> (!Hreadyin until Hreadyout)));  



	
sequence write; 
        Pwrite &&  possible_Pselx  && !Penable ##1 Pwrite && possible_Pselx && Penable;
endsequence

sequence read; 
        !Pwrite && possible_Pselx && !Penable ##1 !Pwrite && possible_Pselx && Penable;
endsequence

//read after write, Paddr must be the same value for 3 cycles after write is true.
property read_after_write;
    @(posedge Hclk) disable iff(!Hresetn)
      write ##1 read  |->##1 $past(Paddr,2) == $past(Paddr);
endproperty
read_after_write1: assert property (read_after_write);



//checks if all items are at zero after reset
property reset_check_Paddr;
    @(posedge Hclk)
        $rose(Hresetn) |-> Paddr == 0;  
endproperty
reset_check_haddr1: assert property (reset_check_Paddr);

property reset_check_Penable;
    @(posedge Hclk)
        $rose(Hresetn) |-> Penable == 0;  
endproperty
reset_check_penable: assert property (reset_check_Penable);

property reset_check_Pwrite;
    @(posedge Hclk)
        $rose(Hresetn) |-> Pwrite == 0;  
endproperty
reset_check_Pwrite1: assert property (reset_check_Pwrite); 

property reset_check_Pwdata;
    @(posedge Hclk)
        $rose(Hresetn) |-> Pwdata == 0;  
endproperty
reset_check_Pwdata1: assert property (reset_check_Pwdata);  

property reset_check_Pselx;
    @(posedge Hclk)
        $rose(Hresetn) |-> Pselx == 0;  
endproperty
reset_check_Pselx1: assert property (reset_check_Pselx); 

//write transaction
sequence write_s;
Hwrite && Hreadyin;
endsequence

//Read transaction
sequence read_s;
!Hwrite && Hreadyin;
endsequence

sequence same_write_s;
Pwrite == Hwrite;
endsequence

//For Address range 8000_0000 to 8400_0000
sequence psel_s0;
$onehot(Pselx) ##0 (Pselx[0] ##1 Pselx[0]);
endsequence

//For Address range 8400_0000 to 8800_0000
sequence psel_s1;
$onehot(Pselx) ##0 (Pselx[1] ##1 Pselx[1]);
endsequence

//For Address range 8800_0000 to 8C00_0000
sequence psel_s2;
$onehot(Pselx) ##0 (Pselx[2] ##1 Pselx[2]);
endsequence

// HRDATA should be same as PRDATA  when PENABLE(Enable cycle)
property same_HR_PR_data;
@(posedge Hclk) disable iff(!Hresetn)
Penable |-> Hrdata == Prdata;
endproperty
assert_same_HR_PR_data: assert property (same_HR_PR_data);

//PWRITE should be same as HWRITE for Read transfer 
property same_HPwrite_read;         
@(posedge Hclk) disable iff(!Hresetn)
!Hwrite && Hreadyin && !($past(Hwrite) && $past(Hreadyin)) |=> (Pwrite == 0);
endproperty
assert_same_HPwrite_read: assert property (same_HPwrite_read);

////PWRITE should be same as HWRITE for Write transfer
property same_HPwrite_write;        
@(posedge Hclk) disable iff(!Hresetn)
write_s |=> ##1 (Pwrite == 1);
endproperty
assert_same_HPwrite_write: assert property (same_HPwrite_write);

//HREADYOUT and PENABLE should be high at end of transaction for Read transfer
property Hreadyout_penable_read;
@(posedge Hclk) disable iff(!Hresetn)
read_s |-> ##2 Penable && Hreadyout;
endproperty
assert_Hreadyout_penable_read: assert property (Hreadyout_penable_read);

//HREADYOUT and PENABLE should be high at end of transaction for write transfer
property Hreadyout_penable_write;             
@(posedge Hclk) disable iff(!Hresetn)
write_s |-> ##3 Penable && Hreadyout;
endproperty
assert_Hreadyout_penable_write: assert property (Hreadyout_penable_write);

//PENABLE shouldn't be high for 2 cycles continously
property no_penable_2cycles;
@(posedge Hclk) disable iff(!Hresetn)
Penable |=> !Penable;
endproperty
assert_no_penable_2cycles: assert property (no_penable_2cycles);

// Valid PSEL
property valid_Psel;
@(posedge Hclk) disable iff(!Hresetn)
$onehot0(Pselx);
endproperty
assert_valid_Psel: assert property (valid_Psel);

// For Read transfer next cycle should have corresponding PSEL high for next 2 clocks and should be onehot
property read_addr0;
@(posedge Hclk) disable iff(!Hresetn)
read_s ##0 addr0 && !($past(Hwrite) && $past(Hreadyin)) |=>  psel_s0;
endproperty
assert_read_addr0: assert property (read_addr0);

property read_addr1;
@(posedge Hclk) disable iff(!Hresetn)
read_s ##0 addr1 && !($past(Hwrite) && $past(Hreadyin)) |=>  psel_s1;
endproperty
assert_read_addr1: assert property (read_addr1);

property read_addr2;
@(posedge Hclk) disable iff(!Hresetn)
read_s ##0 addr2 && !($past(Hwrite) && $past(Hreadyin)) |=>  psel_s2;
endproperty
assert_read_addr2: assert property (read_addr2);

/*
// For Write transfer 2 cycles after should have corresponding PSEL high for next 2 clocks and should be onehot
property write_addr0;                   //Has issue when read after write
@(posedge Hclk) disable iff(!Hresetn)
write_s ##0 addr0 && !($past(Hwrite) && $past(Hreadyin))|=>  ##1 psel_s0;
endproperty
assert_write_addr0: assert property (write_addr0);

property write_addr1;                   //Has issue when read after write
@(posedge Hclk) disable iff(!Hresetn)
write_s ##0 addr1 && !($past(Hwrite) && $past(Hreadyin))|=>  ##1 psel_s1;
endproperty  
assert_write_addr1: assert property (write_addr1);

property write_addr2;                   //Has issue when read after write
@(posedge Hclk) disable iff(!Hresetn)
write_s ##0 addr2 && !($past(Hwrite) && $past(Hreadyin))|=>  ##1 psel_s2;
endproperty
assert_write_addr2: assert property (write_addr2);
*/

// If a read transfer immediately follows a write, then 3 wait states are required to complete the read
property read_after_write_3waitSates;
@(posedge Hclk) disable iff(!Hresetn)
##1 !Hwrite && Hreadyin && ($past(Hwrite, 1) && $past(Hreadyin, 1)) |=>  ##2 (Pwrite == 0 && Paddr == $past(Haddr, 3));
endproperty
assert_read_after_write_3waitSates: assert property (read_after_write_3waitSates);




// Should support back to back writes for 2 different addresses
property write_2_addrs;
logic [31:0] haddr;
@(posedge Hclk) disable iff(!Hresetn)
(write_s, haddr = Haddr) |=> (Hwrite && Hreadyin && Haddr != haddr);
endproperty
cover_write_2_addrs: cover property (write_2_addrs);

// Should have Read after Read in 2 cycles (Burst of reads)
property burst_of_reads;
@(posedge Hclk) disable iff(!Hresetn)
read_s |=> ##1 read_s;
endproperty
cover_burst_of_reads: cover property (burst_of_reads);

// Should have back to back writes (Burst of writes)
property burst_of_writes;
@(posedge Hclk) disable iff(!Hresetn)
write_s |=>  write_s;
endproperty
cover_burst_of_writes: cover property (burst_of_writes);

// Should have Read after Write (Back to back transfers)
property back_to_back;
@(posedge Hclk) disable iff(!Hresetn)
write_s |=>  read_s;
endproperty
cover_back_to_back: cover property (back_to_back);

 

 
endmodule
