module AHB_slave_interface_sva(input wire Hclk,
                               input wire Hresetn,
                               input wire Hwrite,
                               input wire Hreadyin,
                               input wire [1:0] Htrans,
                               input wire [31:0] Haddr,
                               input wire [31:0] Hwdata,
                               input wire [31:0] Prdata,
                               input wire valid,
                               input wire [31:0] Haddr1,
                               input wire [31:0] Haddr2,
                               input wire [31:0] Hwdata1,
                               input wire [31:0] Hwdata2,
                               input wire [31:0] Hrdata,
                               input wire Hwritereg,
                               input wire [2:0] tempselx,
                               input wire [1:0] Hresp);

   
// Assert valid signal generation logic
property valid_signal_generation;
    @(posedge Hclk)
    (Hresetn && Hreadyin && (Haddr >= 32'h8000_0000 && Haddr < 32'h8C00_0000) && (Htrans == 2'b10 || Htrans == 2'b11)) |-> (valid == 1'b1);
endproperty
assert property (valid_signal_generation);

// Assert that valid should not be high when conditions are not met
property valid_signal_not_high;
    @(posedge Hclk)
    (!(Hresetn && Hreadyin && (Haddr >= 32'h8000_0000 && Haddr < 32'h8C00_0000) && (Htrans == 2'b10 || Htrans == 2'b11))) |-> (valid == 1'b0);
endproperty
assert property (valid_signal_not_high);


// Assert tempselx logic for different ranges of Haddr
property tempselx_range_1;
    @(posedge Hclk)
    (Hresetn && (Haddr >= 32'h8000_0000 && Haddr < 32'h8400_0000)) |-> (tempselx == 3'b001);
endproperty
assert property (tempselx_range_1);

property tempselx_range_2;
    @(posedge Hclk)
    (Hresetn && (Haddr >= 32'h8400_0000 && Haddr < 32'h8800_0000)) |-> (tempselx == 3'b010);
endproperty
assert property (tempselx_range_2);

property tempselx_range_3;
    @(posedge Hclk)
    (Hresetn && (Haddr >= 32'h8800_0000 && Haddr < 32'h8C00_0000)) |-> (tempselx == 3'b100);
endproperty
assert property (tempselx_range_3);


// Assert tempselx should be 000 for invalid ranges of Haddr
property tempselx_invalid_range;
    @(posedge Hclk)
    (Hresetn && !(Haddr >= 32'h8000_0000 && Haddr < 32'h8C00_0000)) |-> (tempselx == 3'b000);
endproperty
assert property (tempselx_invalid_range);

endmodule